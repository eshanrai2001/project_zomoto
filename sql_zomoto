drop table if exists goldusers_signup;
CREATE TABLE goldusers_signup(userid integer,gold_signup_date date); 


INSERT INTO goldusers_signup(userid,gold_signup_date) 
 VALUES (1,'2017-22-09'),
(3,'2017-21-04');

drop table if exists users;
CREATE TABLE users(userid integer,signup_date datetime); 

INSERT INTO users(userid,signup_date) 
 VALUES (1,'2014-02-09'),
(2,'2015-15-01'),
(3,'2014-11-04');

drop table if exists sales;
CREATE TABLE sales(userid integer,created_date datetime,product_id integer); 

INSERT INTO sales(userid,created_date,product_id) 
 VALUES (1,'2017-19-04',2),
(3,'2019-18-12',1),
(2,'2020-20-07',3),
(1,'2019-23-10',2),
(1,'2018-19-03',3),
(3,'2016-20-12',2),
(1,'2016-09-11',1),
(1,'2016-20-05',3),
(2,'2017-24-09',1),
(1,'2017-11-03',2),
(1,'2016-11-03',1),
(3,'2016-10-11',1),
(3,'2017-12-07',2),
(3,'2019-12-18',2),
(2,'2017-08-11',2),
(2,'2018-10-09',3);


drop table if exists product;
CREATE TABLE product(product_id integer,product_name text,price integer); 

INSERT INTO product(product_id,product_name,price) 
 VALUES
(1,'p1',980),
(2,'p2',870),
(3,'p3',330);


select * from sales;
select * from product;
select * from goldusers_signup;
select * from users;

/*what is the total amount each cx spent on zomoto*/
select a.userid,sum(b.price) from sales a inner join product b on a.product_id = b.product_id group by userid;

/*Which item cx purchased first after they become the member*/
select * from 
(select c.*,rank() over (partition by userid order by created_date) rnk from  
(select a.userid,b.gold_signup_date,a.created_date,a.product_id from sales a inner join goldusers_signup b on a.userid=b.userid and created_date>=gold_signup_date) c)
where rnk = 1;

/*Which item was purchased just before the cx become member*/
select * from 
(select c.*,rank() over (partition by userid order by created_date desc) rnk from 
(select a.userid,a.product_id,b.gold_signup_date,a.created_date from sales a inner join goldusers_signup b on 
a.userid = b.userid and created_date<gold_signup_date) c)
where rnk = 1;

/*what is the total orders and amount spent before they become the member.*/
select userid,count(created_date),sum(price) from 
(select c.*,price from  
(select a.userid,a.product_id,b.gold_signup_date,a.created_date from sales a inner join goldusers_signup b 
on a.userid = b.userid and created_date<=gold_signup_date)c inner join product d on c.product_id =d.product_id) group by userid;

/*calculate points collected by each cx and for which product most points have been given till now*/
select userid,sum(total_points) from 
(select e.*,amt/points total_points from 
(select d.*,case when product_id = 1 then 5 when product_id=2 then 2 when product_id = 3 then 5 else 0 end as points from 
(select c.userid,c.product_id,sum(price) amt from 
(select a.*,b.price from sales a inner join product b on a.product_id = b.product_id) c
group by userid,product_id)d)e)f group by userid;

/*In the first year after cx joins the gold program(including the joining date) irrespective of what cx has purchased,they 
earn 5 zomoto points for every 10rs , who earn more 1 or 3 and what was their points earnings in the first year*/
select c.*,d.price*0.5 total_points_earned from
(select a.userid,a.product_id,a.created_date,b.gold_signup_date from sales a inner join goldusers_signup b 
on a.userid = b.userid and created_date>=gold_signup_date and
created_date<=DATEADD(year,1,gold_signup_date) c)
inner join product d on a.product_id = d.product_id;

/*rank all the transactions of the customer*/
select c.*,rank() over (partition by userid order by price) rnk from 
(select a.userid,a.product_id,b.price from sales a inner join product b on a.product_id = b.product_id)c;

/*rank all the transaction for each member whether they are zomoto gold member,for every non gold mark trasaction as na*/
select e.*,case when rnk = 0 then "na" else rnk as rkk from
(select c.*,CAST((case when gold_signup_date is null then 0 else
rank() over (partition by userid order by created_date desc) end) as varchar) as rnk from 
(select a.userid,a.product_id,b.gold_signup_date,a.created_date from sales a left join 
goldusers_signup b on a.userid = b.userid and created_date>=gold_signup_date)c)e;
